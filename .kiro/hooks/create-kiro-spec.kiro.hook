{
  "enabled": true,
  "name": "CREATE-KIRO-SPEC",
  "description": "Creates a comprehensive Kiro specification with requirements, design, and tasks following Kiro best practices",
  "version": "1",
  "when": {
    "type": "userTriggered",
    "patterns": ["*"]
  },
  "then": {
    "type": "askAgent",
    "prompt": "Create a comprehensive Kiro specification following the three-file structure (requirements.md, design.md, tasks.md). Follow this step-by-step process:\n\n## Step 1: Analyze Project Context\nFirst, understand the current project structure and existing specifications:\n1. List existing specs in `.kiro/specs/` directory\n2. Review any existing requirements documents or PRFAQs\n3. Identify the feature or component that needs specification\n4. Determine the scope and boundaries of the specification\n\n## Step 2: Create Spec Directory Structure\nCreate the specification directory structure using fish shell:\n```fish\n# Create the spec directory (replace 'feature-name' with your actual feature)\nmkdir -p .kiro/specs/[FEATURE-NAME]\n```\n\n## Step 3: Generate Requirements Document\nCreate `requirements.md` using structured EARS notation:\n1. **Introduction Section**: Provide context and overview of the feature\n2. **User Stories**: Write requirements in the format:\n   - \"As a [user type], I want [goal], so that [benefit]\"\n3. **Acceptance Criteria**: Use EARS format:\n   - \"WHEN [condition] THEN the system SHALL [expected behavior]\"\n4. **Non-functional Requirements**: Include performance, security, and usability requirements\n\nTemplate structure:\n```markdown\n# Requirements Document\n\n## Introduction\n[Brief overview of the feature and its purpose]\n\n## Requirements\n\n### Requirement 1\n**User Story:** As a [user], I want [goal], so that [benefit].\n\n#### Acceptance Criteria\n1. WHEN [condition] THEN the system SHALL [behavior]\n2. WHEN [condition] THEN the system SHALL [behavior]\n\n### Requirement 2\n[Continue with additional requirements...]\n\n## Non-functional Requirements\n- Performance: [specific performance criteria]\n- Security: [security requirements]\n- Usability: [usability standards]\n```\n\n## Step 4: Create Design Document\nCreate `design.md` with technical architecture and implementation approach:\n1. **System Architecture**: High-level component overview\n2. **Component Interactions**: How different parts work together\n3. **Sequence Diagrams**: Process flows and interactions\n4. **Technical Considerations**: Constraints, dependencies, and trade-offs\n5. **Implementation Strategy**: Approach and patterns to be used\n\nTemplate structure:\n```markdown\n# Design Document\n\n## System Architecture\n[High-level architecture overview]\n\n## Component Design\n### Component 1\n[Detailed component description]\n\n### Component 2\n[Detailed component description]\n\n## Sequence Diagrams\n[Process flows and interactions]\n\n## Technical Considerations\n- Dependencies: [list of dependencies]\n- Constraints: [technical constraints]\n- Trade-offs: [design decisions and rationale]\n\n## Implementation Strategy\n[Approach and patterns]\n```\n\n## Step 5: Create Implementation Plan\nCreate `tasks.md` with discrete, trackable tasks:\n1. **Task Breakdown**: Divide work into manageable, independent tasks\n2. **Task Descriptions**: Clear, actionable descriptions\n3. **Expected Outcomes**: Define what \"done\" looks like for each task\n4. **Dependencies**: Identify task dependencies and order\n5. **Status Tracking**: Include status indicators (Not Started, In Progress, Completed)\n\nTemplate structure:\n```markdown\n# Implementation Tasks\n\n## Task Overview\n[Brief summary of implementation approach]\n\n## Tasks\n\n### Task 1: [Task Name]\n**Status:** Not Started\n**Description:** [Clear description of what needs to be done]\n**Expected Outcome:** [What should be delivered]\n**Dependencies:** [Any prerequisite tasks]\n\n### Task 2: [Task Name]\n**Status:** Not Started\n**Description:** [Clear description of what needs to be done]\n**Expected Outcome:** [What should be delivered]\n**Dependencies:** [Any prerequisite tasks]\n\n[Continue with additional tasks...]\n\n## Implementation Notes\n[Any additional context or considerations]\n```\n\n## Step 6: Validate Specification\nReview the complete specification:\n1. **Requirements Validation**: Ensure all requirements are testable and clear\n2. **Design Consistency**: Verify design addresses all requirements\n3. **Task Completeness**: Confirm tasks cover all design elements\n4. **Dependencies**: Check for missing dependencies or circular references\n\n## Best Practices to Follow:\n\n### Requirements Best Practices\n- Use structured EARS notation for acceptance criteria\n- Focus on \"what\" and \"why\", not \"how\"\n- Make requirements testable and measurable\n- Include both functional and non-functional requirements\n\n### Design Best Practices\n- Document the big picture first, then dive into details\n- Include sequence diagrams for complex interactions\n- Address technical constraints and trade-offs\n- Consider scalability and maintainability\n\n### Tasks Best Practices\n- Keep tasks small and focused (ideally 1-3 days of work)\n- Make tasks independent when possible\n- Include clear success criteria\n- Order tasks by dependencies and priority\n\n### Iteration Best Practices\n- Treat specs as living documents\n- Update specs as requirements change\n- Sync specs with actual implementation\n- Use version control to track spec evolution\n\n## Example Usage:\n```fish\n# Create a new authentication spec\nmkdir -p .kiro/specs/user-authentication\n\n# Create the three core files\ntouch .kiro/specs/user-authentication/requirements.md\ntouch .kiro/specs/user-authentication/design.md\ntouch .kiro/specs/user-authentication/tasks.md\n\n# Edit each file following the templates above\n```\n\nEnsure your Kiro specifications follow best practices and provide a solid foundation for development work. Always use fish shell syntax for any terminal commands."
  }
}
